You should use the Bridge Pattern when:
• You want to avoid a permanent binding between an abstraction and its implementation. This might be the case, for example,
when the implementation must be selected or switched at run-time.
• Both the abstractions and their implementations should be extensible by sub-classing. In this case, the Bridge pattern lets you
combine the different abstractions and implementations and extend them independently.
• Changes in the implementation of an abstraction should have no impact on clients; that is, their code should not have to be
recompiled.
• You want to share an implementation among multiple objects (perhaps using reference counting), and this fact should be hidden
from the client

Bridge Pattern을 사용할 경우
• 추상과 그 구현의 영구적 연결을 피하려고 할 때.이 경우는 run-time시에  구현이 선택되거나 변경되어야 한다.

• 추상과 구현 둘 다 sub-class에 의해 확장된다. 이 경우 패턴은 다른 추상과 구현을 조합하고 그것들을 독립적으로 확장한다.

• 추상의 구현에대한 변경은 clients에게 피해를 주지 않는다. 재컴파일할 필요가 없다.

• 많은 객체중에서 구현을 공유하기 원하는 경우이다. 이 사실은 client에게 숨겨진 사실이다.
